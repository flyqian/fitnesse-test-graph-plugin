<h2></h2>
<script src="files/fitnesse/javascript/echarts.min.js"></script>

<div id="main" style="min-width: 1000px;height:300px;margin-bottom: 20px;  border: 1px solid;"></div>
<div id="wrongTable" style="width: 1000px;"></div>
<button id="clearAll" onclick="clearAllKey()">clearAll</button>
<script>
    var testHistoryString =${TestHistoryString};

    var datax = []
    var dataFail = []
    var dataAll = []

    if (testHistoryString != null) {
        var src = testHistoryString.testResultMap
        for (var key in src) {
            datax.push(key)
        }
        // datax.sort() //sort by string
        datax.sort((a, b) => {
            return new Date(a).getTime() - new Date(b).getTime()
        })
        for (var key of datax) {
            dataAll.push(src[key].right + src[key].wrong)
            dataFail.push(src[key].wrong)
        }
        datax = datax.map((item) => {
            var now = new Date(item)
            var time = ""
            time = [now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/');
            time += " " + [now.getHours(), now.getMinutes(), now.getSeconds()].join(":")
            return time;
        })
    }
    //delete some cancel Tests
    for (var i = 1; i < datax.length - 1; i++) {
        if (dataAll[i] < dataAll[i + 1] / 2 && dataAll[i] < dataAll[i - 1] / 2) {
            datax.splice(i, 1)
            dataFail.splice(i, 1)
            dataAll.splice(i, 1)
            i--;
        }
    }


    option = {
        title: {
            text: 'TimeLine'
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'cross',
                label: {
                    backgroundColor: '#6a7985'
                }
            }
        },
        legend: {
            data: ['All Cases', 'Fail Cases']
        },
        toolbox: {
            feature: {
                saveAsImage: {}
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: [
            {
                type: 'category',
                boundaryGap: false,
                data: datax
            }
        ],
        yAxis: [
            {
                type: 'value'
            }
        ],
        series: [
            {
                name: 'Fail Cases',
                smooth: true,
                type: 'line',
                areaStyle: {normal: {color: "red"}},
                data: dataFail
            },
            {
                name: 'All Cases',
                type: 'line',
                smooth: true,
                areaStyle: {normal: {color: "rgba(216, 201, 205, 0.43)"}},
                data: dataAll
            }
        ]
        , dataZoom: [{
            type: 'inside',
            start: 0,
            end: 100
        }, {
            start: 0,
            end: 100,
            handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
            handleSize: '80%',
            handleStyle: {
                color: '#fff',
                shadowBlur: 3,
                shadowColor: 'rgba(0, 0, 0, 0.6)',
                shadowOffsetX: 2,
                shadowOffsetY: 0
            }
        }],
    };

    var myChart = echarts.init(document.getElementById('main'));
    myChart.setOption(option);


    function initTable() {
        fetch("?testStatus")
                .then(resp => resp.json())
                .then(data => {
                    let out = []
                    Object.keys(data).map(key => {
                        if (data[key].wrong > 0) {
                            let node = {pageName: "", wrong: 0, user: "", ...data[key], key}
                            out.push(node)
                        }
                    })
                    out=out.sort((a,b)=>a.key.localeCompare(b.key));
                    var tableDiv = document.getElementById('wrongTable');
                    tableDiv.innerHTML="";
                    tableDiv.append(createTable(out))
                })
    }


    function createTable(tableData) {
        var table = document.createElement('table');
        var tableBody = document.createElement('tbody');

        tableData.forEach(function (rowData) {
            var row = document.createElement('tr');

            Object.values(rowData).forEach(function (cellData) {
                var cell = document.createElement('td');
                var link = document.createElement("a")
                link.href = cellData;
                link.text = cellData;
                cell.appendChild(link);
                row.appendChild(cell);
            });
            var cellDelete = document.createElement('td');
            var a = document.createElement("a");
            a.text = "delete"
            a.className = "delete-link"
            a.onclick = () => deleteByKey(rowData.key);
            cellDelete.appendChild(a)
            row.appendChild(cellDelete)

            tableBody.appendChild(row);
        });

        table.appendChild(tableBody);
        return table;
    }

    /**
     * 删除无用的key
     */
    function deleteByKey(key) {
        fetch("?testStatus&deleteKey=" + key).then(resp => resp.json())
                .then(json=>{
                    initTable();
                })
    }
    function clearAllKey(key) {
        fetch("?testStatus&clear=" + key).then(resp => resp.json())
                .then(json=>{
                    initTable();
                })
    }

    initTable();
</script>

<style>

    .delete-link{
        cursor: pointer;
    }
    #wrongTable td{
        max-width: 50vw;
        overflow: hidden;
    }
</style>